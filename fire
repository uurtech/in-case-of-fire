#!/bin/bash

# fire - Emergency git commit and push script
# Based on the "In case of fire: git commit, git push, leave building" meme

set -e

# Configuration file location
CONFIG_FILE="$HOME/.fire_config"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_fire() {
    echo -e "${RED}üî• FIRE EMERGENCY PROTOCOL ACTIVATED üî•${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Function to generate random branch name
generate_branch_name() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local random_suffix=$(openssl rand -hex 4 2>/dev/null || echo $(date +%N | cut -c1-8))
    echo "fire_emergency_${timestamp}_${random_suffix}"
}

# Function to handle git operations for a single directory
handle_git_repo() {
    local repo_path="$1"
    local repo_name=$(basename "$repo_path")
    
    print_info "Processing repository: $repo_name"
    
    cd "$repo_path"
    
    # Check if it's a git repository
    if [ ! -d ".git" ]; then
        print_warning "Skipping $repo_name - not a git repository"
        return 0
    fi
    
    # Check if there are any changes to commit
    if git diff --quiet && git diff --cached --quiet; then
        print_info "No changes to commit in $repo_name"
        return 0
    fi
    
    # Generate random branch name
    local branch_name=$(generate_branch_name)
    
    print_info "Creating emergency branch: $branch_name in $repo_name"
    
    # Create and switch to new branch
    git checkout -b "$branch_name" 2>/dev/null || {
        print_warning "Failed to create branch in $repo_name, trying to commit to current branch"
        branch_name=$(git branch --show-current)
    }
    
    # Add all changes
    git add . 2>/dev/null || {
        print_warning "Failed to add changes in $repo_name"
        return 1
    }
    
    # Commit changes
    git commit -m "üî• FIRE TRIGGERED - Emergency commit at $(date)" 2>/dev/null || {
        print_warning "Failed to commit in $repo_name"
        return 1
    }
    
    # Try to push to remote
    if git remote | grep -q .; then
        print_info "Pushing emergency branch $branch_name in $repo_name..."
        git push -u origin "$branch_name" 2>/dev/null && {
            print_success "Emergency backup completed for $repo_name -> $branch_name"
        } || {
            print_warning "Failed to push $repo_name - but committed locally to $branch_name"
        }
    else
        print_warning "No remote configured for $repo_name - committed locally to $branch_name"
    fi
}

# Function to setup initial configuration
setup_config() {
    print_fire
    echo
    print_info "üîß FIRST TIME SETUP üîß"
    echo
    echo "This script will monitor directories for git repositories and perform emergency commits."
    echo
    read -p "Which path should I monitor for git repositories? (Enter full path): " target_path
    
    # Validate path exists
    if [ ! -d "$target_path" ]; then
        echo -e "${RED}‚ùå Error: Directory '$target_path' does not exist!${NC}"
        exit 1
    fi
    
    # Save configuration
    echo "TARGET_PATH=\"$target_path\"" > "$CONFIG_FILE"
    print_success "Configuration saved! Target path: $target_path"
    echo
}

# Function to find all git repositories in target path
find_git_repos() {
    local target_path="$1"
    find "$target_path" -type d -name ".git" -exec dirname {} \; 2>/dev/null | sort
}

# Main execution
main() {
    # Check if configuration exists
    if [ ! -f "$CONFIG_FILE" ]; then
        setup_config
    fi
    
    # Load configuration
    source "$CONFIG_FILE"
    
    # Validate target path still exists
    if [ ! -d "$TARGET_PATH" ]; then
        echo -e "${RED}‚ùå Error: Configured path '$TARGET_PATH' no longer exists!${NC}"
        echo "Run the script again to reconfigure."
        rm "$CONFIG_FILE"
        exit 1
    fi
    
    print_fire
    echo
    print_info "Scanning for git repositories in: $TARGET_PATH"
    
    # Find all git repositories
    local git_repos=($(find_git_repos "$TARGET_PATH"))
    
    if [ ${#git_repos[@]} -eq 0 ]; then
        print_warning "No git repositories found in $TARGET_PATH"
        exit 0
    fi
    
    print_info "Found ${#git_repos[@]} git repositories"
    echo
    
    # Process repositories in parallel
    local pids=()
    for repo in "${git_repos[@]}"; do
        handle_git_repo "$repo" &
        pids+=($!)
    done
    
    # Wait for all background processes to complete
    print_info "Processing repositories in parallel..."
    for pid in "${pids[@]}"; do
        wait "$pid"
    done
    
    echo
    print_fire
    print_success "üö® FIRE EMERGENCY PROTOCOL COMPLETED! üö®"
    print_info "All repositories have been processed. You can now safely leave the building! üèÉ‚Äç‚ôÇÔ∏èüí®"
}

# Handle command line arguments
case "${1:-}" in
    "--setup"|"-s")
        rm -f "$CONFIG_FILE"
        setup_config
        ;;
    "--help"|"-h")
        echo "üî• FIRE - Emergency Git Commit Script"
        echo
        echo "Usage:"
        echo "  fire           Run emergency git commit and push"
        echo "  fire --setup   Reconfigure target path"
        echo "  fire --help    Show this help message"
        echo
        echo "Based on the 'In case of fire: git commit, git push, leave building' meme"
        ;;
    "")
        main
        ;;
    *)
        echo -e "${RED}Unknown option: $1${NC}"
        echo "Use 'fire --help' for usage information"
        exit 1
        ;;
esac 